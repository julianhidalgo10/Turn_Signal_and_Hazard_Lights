
Turn_Signal_and_Hazard_Lights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003544  08003544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035a4  080035a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035a4  080035a4  000135a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035ac  080035ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035ac  080035ac  000135ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035b0  080035b0  000135b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  080035c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080035c0  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a43a  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000177d  00000000  00000000  0002a4b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d8  00000000  00000000  0002bc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c7  00000000  00000000  0002c510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c1d  00000000  00000000  0002cbd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a8b8  00000000  00000000  000517f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3b80  00000000  00000000  0005c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002328  00000000  00000000  0013fc2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00141f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800352c 	.word	0x0800352c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800352c 	.word	0x0800352c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == S1_Pin && HAL_GetTick() > (left_last_press_tick + 200)) {
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d13f      	bne.n	8000554 <HAL_GPIO_EXTI_Callback+0x90>
 80004d4:	f000 fc26 	bl	8000d24 <HAL_GetTick>
 80004d8:	4602      	mov	r2, r0
 80004da:	4b56      	ldr	r3, [pc, #344]	; (8000634 <HAL_GPIO_EXTI_Callback+0x170>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	33c8      	adds	r3, #200	; 0xc8
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d937      	bls.n	8000554 <HAL_GPIO_EXTI_Callback+0x90>
		if(right_toggles > 0){
 80004e4:	4b54      	ldr	r3, [pc, #336]	; (8000638 <HAL_GPIO_EXTI_Callback+0x174>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d002      	beq.n	80004f2 <HAL_GPIO_EXTI_Callback+0x2e>
			state = 1;
 80004ec:	4b53      	ldr	r3, [pc, #332]	; (800063c <HAL_GPIO_EXTI_Callback+0x178>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	601a      	str	r2, [r3, #0]
		}
		left_toggles = 0;
 80004f2:	4b53      	ldr	r3, [pc, #332]	; (8000640 <HAL_GPIO_EXTI_Callback+0x17c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
		right_toggles = 0;
 80004f8:	4b4f      	ldr	r3, [pc, #316]	; (8000638 <HAL_GPIO_EXTI_Callback+0x174>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
		stop_toggles = 0;
 80004fe:	4b51      	ldr	r3, [pc, #324]	; (8000644 <HAL_GPIO_EXTI_Callback+0x180>)
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000504:	2201      	movs	r2, #1
 8000506:	2180      	movs	r1, #128	; 0x80
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f000 fed2 	bl	80012b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000510:	2201      	movs	r2, #1
 8000512:	2140      	movs	r1, #64	; 0x40
 8000514:	484c      	ldr	r0, [pc, #304]	; (8000648 <HAL_GPIO_EXTI_Callback+0x184>)
 8000516:	f000 fecd 	bl	80012b4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, "S1\r\n", 4, 10);
 800051a:	230a      	movs	r3, #10
 800051c:	2204      	movs	r2, #4
 800051e:	494b      	ldr	r1, [pc, #300]	; (800064c <HAL_GPIO_EXTI_Callback+0x188>)
 8000520:	484b      	ldr	r0, [pc, #300]	; (8000650 <HAL_GPIO_EXTI_Callback+0x18c>)
 8000522:	f002 fa7f 	bl	8002a24 <HAL_UART_Transmit>
		if (HAL_GetTick() < (left_last_press_tick + 300)) {
 8000526:	f000 fbfd 	bl	8000d24 <HAL_GetTick>
 800052a:	4602      	mov	r2, r0
 800052c:	4b41      	ldr	r3, [pc, #260]	; (8000634 <HAL_GPIO_EXTI_Callback+0x170>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000534:	429a      	cmp	r2, r3
 8000536:	d204      	bcs.n	8000542 <HAL_GPIO_EXTI_Callback+0x7e>
			// if the most recent button press occurred within the past 300 milliseconds.
			left_toggles = 0xFFFFFF; // a long time toggling (infinite)
 8000538:	4b41      	ldr	r3, [pc, #260]	; (8000640 <HAL_GPIO_EXTI_Callback+0x17c>)
 800053a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	e002      	b.n	8000548 <HAL_GPIO_EXTI_Callback+0x84>
		} else {
			left_toggles = 6;
 8000542:	4b3f      	ldr	r3, [pc, #252]	; (8000640 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000544:	2206      	movs	r2, #6
 8000546:	601a      	str	r2, [r3, #0]
		}
		left_last_press_tick = HAL_GetTick();
 8000548:	f000 fbec 	bl	8000d24 <HAL_GetTick>
 800054c:	4603      	mov	r3, r0
 800054e:	4a39      	ldr	r2, [pc, #228]	; (8000634 <HAL_GPIO_EXTI_Callback+0x170>)
 8000550:	6013      	str	r3, [r2, #0]
 8000552:	e06b      	b.n	800062c <HAL_GPIO_EXTI_Callback+0x168>

	} else if (GPIO_Pin == S2_Pin && HAL_GetTick() > (right_last_press_tick + 200)) {
 8000554:	88fb      	ldrh	r3, [r7, #6]
 8000556:	2b10      	cmp	r3, #16
 8000558:	d13f      	bne.n	80005da <HAL_GPIO_EXTI_Callback+0x116>
 800055a:	f000 fbe3 	bl	8000d24 <HAL_GetTick>
 800055e:	4602      	mov	r2, r0
 8000560:	4b3c      	ldr	r3, [pc, #240]	; (8000654 <HAL_GPIO_EXTI_Callback+0x190>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	33c8      	adds	r3, #200	; 0xc8
 8000566:	429a      	cmp	r2, r3
 8000568:	d937      	bls.n	80005da <HAL_GPIO_EXTI_Callback+0x116>
		if(left_toggles > 0){
 800056a:	4b35      	ldr	r3, [pc, #212]	; (8000640 <HAL_GPIO_EXTI_Callback+0x17c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d002      	beq.n	8000578 <HAL_GPIO_EXTI_Callback+0xb4>
			state2 = 1;
 8000572:	4b39      	ldr	r3, [pc, #228]	; (8000658 <HAL_GPIO_EXTI_Callback+0x194>)
 8000574:	2201      	movs	r2, #1
 8000576:	601a      	str	r2, [r3, #0]
		}
		right_toggles = 0;
 8000578:	4b2f      	ldr	r3, [pc, #188]	; (8000638 <HAL_GPIO_EXTI_Callback+0x174>)
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
		left_toggles = 0;
 800057e:	4b30      	ldr	r3, [pc, #192]	; (8000640 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
		stop_toggles = 0;
 8000584:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <HAL_GPIO_EXTI_Callback+0x180>)
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 800058a:	2201      	movs	r2, #1
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f000 fe8f 	bl	80012b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000596:	2201      	movs	r2, #1
 8000598:	2140      	movs	r1, #64	; 0x40
 800059a:	482b      	ldr	r0, [pc, #172]	; (8000648 <HAL_GPIO_EXTI_Callback+0x184>)
 800059c:	f000 fe8a 	bl	80012b4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, "S2\r\n", 4, 10);
 80005a0:	230a      	movs	r3, #10
 80005a2:	2204      	movs	r2, #4
 80005a4:	492d      	ldr	r1, [pc, #180]	; (800065c <HAL_GPIO_EXTI_Callback+0x198>)
 80005a6:	482a      	ldr	r0, [pc, #168]	; (8000650 <HAL_GPIO_EXTI_Callback+0x18c>)
 80005a8:	f002 fa3c 	bl	8002a24 <HAL_UART_Transmit>
		if (HAL_GetTick() < (right_last_press_tick + 300)) {
 80005ac:	f000 fbba 	bl	8000d24 <HAL_GetTick>
 80005b0:	4602      	mov	r2, r0
 80005b2:	4b28      	ldr	r3, [pc, #160]	; (8000654 <HAL_GPIO_EXTI_Callback+0x190>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d204      	bcs.n	80005c8 <HAL_GPIO_EXTI_Callback+0x104>
			// if the previous button press occurred within the last 300 milliseconds.
			right_toggles = 0xFFFFFF; // a long time toggling (infinite)
 80005be:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <HAL_GPIO_EXTI_Callback+0x174>)
 80005c0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	e002      	b.n	80005ce <HAL_GPIO_EXTI_Callback+0x10a>
		} else {
			right_toggles = 6;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <HAL_GPIO_EXTI_Callback+0x174>)
 80005ca:	2206      	movs	r2, #6
 80005cc:	601a      	str	r2, [r3, #0]
				}
		right_last_press_tick = HAL_GetTick();
 80005ce:	f000 fba9 	bl	8000d24 <HAL_GetTick>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a1f      	ldr	r2, [pc, #124]	; (8000654 <HAL_GPIO_EXTI_Callback+0x190>)
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	e028      	b.n	800062c <HAL_GPIO_EXTI_Callback+0x168>

	} else if (GPIO_Pin == S3_Pin) {
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d125      	bne.n	800062c <HAL_GPIO_EXTI_Callback+0x168>
		if(stop_toggles > 0){
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <HAL_GPIO_EXTI_Callback+0x180>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <HAL_GPIO_EXTI_Callback+0x12a>
			state3 = 1;
 80005e8:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <HAL_GPIO_EXTI_Callback+0x19c>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	601a      	str	r2, [r3, #0]
		}
		stop_toggles = 0;
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <HAL_GPIO_EXTI_Callback+0x180>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
		right_toggles = 0;
 80005f4:	4b10      	ldr	r3, [pc, #64]	; (8000638 <HAL_GPIO_EXTI_Callback+0x174>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
		left_toggles = 0;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <HAL_GPIO_EXTI_Callback+0x17c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	2180      	movs	r1, #128	; 0x80
 8000604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000608:	f000 fe54 	bl	80012b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <HAL_GPIO_EXTI_Callback+0x184>)
 8000612:	f000 fe4f 	bl	80012b4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, "S3\r\n", 4, 10);
 8000616:	230a      	movs	r3, #10
 8000618:	2204      	movs	r2, #4
 800061a:	4912      	ldr	r1, [pc, #72]	; (8000664 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <HAL_GPIO_EXTI_Callback+0x18c>)
 800061e:	f002 fa01 	bl	8002a24 <HAL_UART_Transmit>
		stop_toggles = 0xFFFFFF; // a long time toggling (infinite)
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <HAL_GPIO_EXTI_Callback+0x180>)
 8000624:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000628:	601a      	str	r2, [r3, #0]
			}
}
 800062a:	e7ff      	b.n	800062c <HAL_GPIO_EXTI_Callback+0x168>
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200000b8 	.word	0x200000b8
 8000638:	200000b4 	.word	0x200000b4
 800063c:	200000c4 	.word	0x200000c4
 8000640:	200000b0 	.word	0x200000b0
 8000644:	200000c0 	.word	0x200000c0
 8000648:	48000400 	.word	0x48000400
 800064c:	08003544 	.word	0x08003544
 8000650:	20000028 	.word	0x20000028
 8000654:	200000bc 	.word	0x200000bc
 8000658:	200000c8 	.word	0x200000c8
 800065c:	0800354c 	.word	0x0800354c
 8000660:	200000cc 	.word	0x200000cc
 8000664:	08003554 	.word	0x08003554

08000668 <heartbeat>:

void heartbeat(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	static uint32_t heartbeat_tick = 0;
	if (heartbeat_tick < HAL_GetTick()) {
 800066c:	f000 fb5a 	bl	8000d24 <HAL_GetTick>
 8000670:	4602      	mov	r2, r0
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <heartbeat+0x30>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	429a      	cmp	r2, r3
 8000678:	d90b      	bls.n	8000692 <heartbeat+0x2a>
		heartbeat_tick = HAL_GetTick() + 500;
 800067a:	f000 fb53 	bl	8000d24 <HAL_GetTick>
 800067e:	4603      	mov	r3, r0
 8000680:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <heartbeat+0x30>)
 8000686:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(D1_GPIO_Port, D1_Pin);
 8000688:	2120      	movs	r1, #32
 800068a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068e:	f000 fe29 	bl	80012e4 <HAL_GPIO_TogglePin>
	}
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200000d0 	.word	0x200000d0

0800069c <turn_signal_left>:

void turn_signal_left(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	static uint32_t turn_toggle_tick = 0;
	if (turn_toggle_tick < HAL_GetTick()) {
 80006a0:	f000 fb40 	bl	8000d24 <HAL_GetTick>
 80006a4:	4602      	mov	r2, r0
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <turn_signal_left+0x6c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d929      	bls.n	8000702 <turn_signal_left+0x66>
		if (left_toggles > 0 && state != 1) {
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <turn_signal_left+0x70>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d015      	beq.n	80006e2 <turn_signal_left+0x46>
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <turn_signal_left+0x74>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d011      	beq.n	80006e2 <turn_signal_left+0x46>
			turn_toggle_tick = HAL_GetTick() + 500;
 80006be:	f000 fb31 	bl	8000d24 <HAL_GetTick>
 80006c2:	4603      	mov	r3, r0
 80006c4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80006c8:	4a0f      	ldr	r2, [pc, #60]	; (8000708 <turn_signal_left+0x6c>)
 80006ca:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d2:	f000 fe07 	bl	80012e4 <HAL_GPIO_TogglePin>
			left_toggles--;
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <turn_signal_left+0x70>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3b01      	subs	r3, #1
 80006dc:	4a0b      	ldr	r2, [pc, #44]	; (800070c <turn_signal_left+0x70>)
 80006de:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
			left_toggles = 0;
			state = 0;
	}
	}
}
 80006e0:	e00f      	b.n	8000702 <turn_signal_left+0x66>
		} else if(stop_toggles <= 0) {
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <turn_signal_left+0x78>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d10b      	bne.n	8000702 <turn_signal_left+0x66>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f2:	f000 fddf 	bl	80012b4 <HAL_GPIO_WritePin>
			left_toggles = 0;
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <turn_signal_left+0x70>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
			state = 0;
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <turn_signal_left+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200000d4 	.word	0x200000d4
 800070c:	200000b0 	.word	0x200000b0
 8000710:	200000c4 	.word	0x200000c4
 8000714:	200000c0 	.word	0x200000c0

08000718 <turn_signal_right>:

void turn_signal_right(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	static uint32_t turn_toggle_tick = 0;
	if (turn_toggle_tick < HAL_GetTick()){
 800071c:	f000 fb02 	bl	8000d24 <HAL_GetTick>
 8000720:	4602      	mov	r2, r0
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <turn_signal_right+0x68>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	429a      	cmp	r2, r3
 8000728:	d927      	bls.n	800077a <turn_signal_right+0x62>
		if (right_toggles > 0 && state2 != 1) {
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <turn_signal_right+0x6c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d014      	beq.n	800075c <turn_signal_right+0x44>
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <turn_signal_right+0x70>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d010      	beq.n	800075c <turn_signal_right+0x44>
			turn_toggle_tick = HAL_GetTick() + 500;
 800073a:	f000 faf3 	bl	8000d24 <HAL_GetTick>
 800073e:	4603      	mov	r3, r0
 8000740:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000744:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <turn_signal_right+0x68>)
 8000746:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000748:	2140      	movs	r1, #64	; 0x40
 800074a:	4810      	ldr	r0, [pc, #64]	; (800078c <turn_signal_right+0x74>)
 800074c:	f000 fdca 	bl	80012e4 <HAL_GPIO_TogglePin>
			right_toggles--;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <turn_signal_right+0x6c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	3b01      	subs	r3, #1
 8000756:	4a0b      	ldr	r2, [pc, #44]	; (8000784 <turn_signal_right+0x6c>)
 8000758:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
			right_toggles = 0;
			state2 = 0;
	}
	}
}
 800075a:	e00e      	b.n	800077a <turn_signal_right+0x62>
		} else if(stop_toggles <= 0){
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <turn_signal_right+0x78>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d10a      	bne.n	800077a <turn_signal_right+0x62>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000764:	2201      	movs	r2, #1
 8000766:	2140      	movs	r1, #64	; 0x40
 8000768:	4808      	ldr	r0, [pc, #32]	; (800078c <turn_signal_right+0x74>)
 800076a:	f000 fda3 	bl	80012b4 <HAL_GPIO_WritePin>
			right_toggles = 0;
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <turn_signal_right+0x6c>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
			state2 = 0;
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <turn_signal_right+0x70>)
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000d8 	.word	0x200000d8
 8000784:	200000b4 	.word	0x200000b4
 8000788:	200000c8 	.word	0x200000c8
 800078c:	48000400 	.word	0x48000400
 8000790:	200000c0 	.word	0x200000c0

08000794 <stationary>:

void stationary(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	static uint32_t turn_toggle_tick = 0;
	if (turn_toggle_tick < HAL_GetTick()){
 8000798:	f000 fac4 	bl	8000d24 <HAL_GetTick>
 800079c:	4602      	mov	r2, r0
 800079e:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <stationary+0x84>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d936      	bls.n	8000814 <stationary+0x80>
		if (stop_toggles > 0 && state3 != 1) {
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <stationary+0x88>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d019      	beq.n	80007e2 <stationary+0x4e>
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <stationary+0x8c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d015      	beq.n	80007e2 <stationary+0x4e>
			turn_toggle_tick = HAL_GetTick() + 500;
 80007b6:	f000 fab5 	bl	8000d24 <HAL_GetTick>
 80007ba:	4603      	mov	r3, r0
 80007bc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80007c0:	4a15      	ldr	r2, [pc, #84]	; (8000818 <stationary+0x84>)
 80007c2:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 80007c4:	2180      	movs	r1, #128	; 0x80
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ca:	f000 fd8b 	bl	80012e4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 80007ce:	2140      	movs	r1, #64	; 0x40
 80007d0:	4814      	ldr	r0, [pc, #80]	; (8000824 <stationary+0x90>)
 80007d2:	f000 fd87 	bl	80012e4 <HAL_GPIO_TogglePin>
			stop_toggles--;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <stationary+0x88>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	3b01      	subs	r3, #1
 80007dc:	4a0f      	ldr	r2, [pc, #60]	; (800081c <stationary+0x88>)
 80007de:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
			stop_toggles = 0;
			state3 = 0;
		}
	}
}
 80007e0:	e018      	b.n	8000814 <stationary+0x80>
		}  else if (right_toggles <= 0 && left_toggles <= 0){
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <stationary+0x94>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d114      	bne.n	8000814 <stationary+0x80>
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <stationary+0x98>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d110      	bne.n	8000814 <stationary+0x80>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fa:	f000 fd5b 	bl	80012b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80007fe:	2201      	movs	r2, #1
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	4808      	ldr	r0, [pc, #32]	; (8000824 <stationary+0x90>)
 8000804:	f000 fd56 	bl	80012b4 <HAL_GPIO_WritePin>
			stop_toggles = 0;
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <stationary+0x88>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
			state3 = 0;
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <stationary+0x8c>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200000dc 	.word	0x200000dc
 800081c:	200000c0 	.word	0x200000c0
 8000820:	200000cc 	.word	0x200000cc
 8000824:	48000400 	.word	0x48000400
 8000828:	200000b4 	.word	0x200000b4
 800082c:	200000b0 	.word	0x200000b0

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000834:	f000 fa0d 	bl	8000c52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000838:	f000 f80d 	bl	8000856 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083c:	f000 f882 	bl	8000944 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000840:	f000 f850 	bl	80008e4 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  heartbeat();
 8000844:	f7ff ff10 	bl	8000668 <heartbeat>
	  turn_signal_left();
 8000848:	f7ff ff28 	bl	800069c <turn_signal_left>
	  turn_signal_right();
 800084c:	f7ff ff64 	bl	8000718 <turn_signal_right>
	  stationary();
 8000850:	f7ff ffa0 	bl	8000794 <stationary>
	  heartbeat();
 8000854:	e7f6      	b.n	8000844 <main+0x14>

08000856 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b096      	sub	sp, #88	; 0x58
 800085a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2244      	movs	r2, #68	; 0x44
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f002 fe34 	bl	80034d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086a:	463b      	mov	r3, r7
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000878:	f44f 7000 	mov.w	r0, #512	; 0x200
 800087c:	f000 fd72 	bl	8001364 <HAL_PWREx_ControlVoltageScaling>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000886:	f000 f8e3 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the RCC oscillators based on the provided parameters.
  * Within the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800088a:	2310      	movs	r3, #16
 800088c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800088e:	2301      	movs	r3, #1
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000896:	2360      	movs	r3, #96	; 0x60
 8000898:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800089a:	2300      	movs	r3, #0
 800089c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fdb4 	bl	8001410 <HAL_RCC_OscConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80008ae:	f000 f8cf 	bl	8000a50 <Error_Handler>
  }

  /** Configures the clocks for the CPU, AHB, and APB buses.
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	230f      	movs	r3, #15
 80008b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008c6:	463b      	mov	r3, r7
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 f97c 	bl	8001bc8 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008d6:	f000 f8bb 	bl	8000a50 <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	3758      	adds	r7, #88	; 0x58
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_USART2_UART_Init+0x58>)
 80008ea:	4a15      	ldr	r2, [pc, #84]	; (8000940 <MX_USART2_UART_Init+0x5c>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_USART2_UART_Init+0x58>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_USART2_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART2_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART2_UART_Init+0x58>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART2_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART2_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART2_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART2_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART2_UART_Init+0x58>)
 8000928:	f002 f82e 	bl	8002988 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000932:	f000 f88d 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000028 	.word	0x20000028
 8000940:	40004400 	.word	0x40004400

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b3b      	ldr	r3, [pc, #236]	; (8000a48 <MX_GPIO_Init+0x104>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a3a      	ldr	r2, [pc, #232]	; (8000a48 <MX_GPIO_Init+0x104>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b38      	ldr	r3, [pc, #224]	; (8000a48 <MX_GPIO_Init+0x104>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b35      	ldr	r3, [pc, #212]	; (8000a48 <MX_GPIO_Init+0x104>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a34      	ldr	r2, [pc, #208]	; (8000a48 <MX_GPIO_Init+0x104>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b32      	ldr	r3, [pc, #200]	; (8000a48 <MX_GPIO_Init+0x104>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D1_Pin|D3_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	21a0      	movs	r1, #160	; 0xa0
 800098e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000992:	f000 fc8f 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2140      	movs	r1, #64	; 0x40
 800099a:	482c      	ldr	r0, [pc, #176]	; (8000a4c <MX_GPIO_Init+0x108>)
 800099c:	f000 fc8a 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : S1_Pin S2_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 80009a0:	2312      	movs	r3, #18
 80009a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4619      	mov	r1, r3
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b8:	f000 fad2 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin D3_Pin */
  GPIO_InitStruct.Pin = D1_Pin|D3_Pin;
 80009bc:	23a0      	movs	r3, #160	; 0xa0
 80009be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4619      	mov	r1, r3
 80009d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d6:	f000 fac3 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
 80009da:	2301      	movs	r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	4619      	mov	r1, r3
 80009ee:	4817      	ldr	r0, [pc, #92]	; (8000a4c <MX_GPIO_Init+0x108>)
 80009f0:	f000 fab6 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 80009f4:	2340      	movs	r3, #64	; 0x40
 80009f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4810      	ldr	r0, [pc, #64]	; (8000a4c <MX_GPIO_Init+0x108>)
 8000a0c:	f000 faa8 	bl	8000f60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	2006      	movs	r0, #6
 8000a16:	f000 fa6c 	bl	8000ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a1a:	2006      	movs	r0, #6
 8000a1c:	f000 fa85 	bl	8000f2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	2007      	movs	r0, #7
 8000a26:	f000 fa64 	bl	8000ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a2a:	2007      	movs	r0, #7
 8000a2c:	f000 fa7d 	bl	8000f2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	200a      	movs	r0, #10
 8000a36:	f000 fa5c 	bl	8000ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a3a:	200a      	movs	r0, #10
 8000a3c:	f000 fa75 	bl	8000f2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a40:	bf00      	nop
 8000a42:	3720      	adds	r7, #32
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	48000400 	.word	0x48000400

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <Error_Handler+0x8>
	...

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6593      	str	r3, [r2, #88]	; 0x58
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b0ac      	sub	sp, #176	; 0xb0
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2288      	movs	r2, #136	; 0x88
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 fd04 	bl	80034d2 <memset>
  if(huart->Instance==USART2)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <HAL_UART_MspInit+0xb0>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d13b      	bne.n	8000b4c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fa95 	bl	8002010 <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aec:	f7ff ffb0 	bl	8000a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_UART_MspInit+0xb4>)
 8000af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af4:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <HAL_UART_MspInit+0xb4>)
 8000af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afa:	6593      	str	r3, [r2, #88]	; 0x58
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <HAL_UART_MspInit+0xb4>)
 8000afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <HAL_UART_MspInit+0xb4>)
 8000b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0c:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <HAL_UART_MspInit+0xb4>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_UART_MspInit+0xb4>)
 8000b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b20:	230c      	movs	r3, #12
 8000b22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b38:	2307      	movs	r3, #7
 8000b3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b42:	4619      	mov	r1, r3
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b48:	f000 fa0a 	bl	8000f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b4c:	bf00      	nop
 8000b4e:	37b0      	adds	r7, #176	; 0xb0
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40004400 	.word	0x40004400
 8000b58:	40021000 	.word	0x40021000

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba8:	f000 f8a8 	bl	8000cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S3_Pin);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f000 fbaf 	bl	8001318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	f000 fba8 	bl	8001318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S2_Pin);
 8000bd0:	2010      	movs	r0, #16
 8000bd2:	f000 fba1 	bl	8001318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c04:	f7ff ffea 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	; (8000c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <LoopForever+0xe>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	; (8000c4c <LoopForever+0x16>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f002 fc59 	bl	80034e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c32:	f7ff fdfd 	bl	8000830 <main>

08000c36 <LoopForever>:

LoopForever:
    b LoopForever
 8000c36:	e7fe      	b.n	8000c36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c44:	080035b4 	.word	0x080035b4
  ldr r2, =_sbss
 8000c48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c4c:	200000e4 	.word	0x200000e4

08000c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC1_2_IRQHandler>

08000c52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f000 f93d 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c62:	200f      	movs	r0, #15
 8000c64:	f000 f80e 	bl	8000c84 <HAL_InitTick>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d002      	beq.n	8000c74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	71fb      	strb	r3, [r7, #7]
 8000c72:	e001      	b.n	8000c78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c74:	f7ff fef2 	bl	8000a5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c78:	79fb      	ldrb	r3, [r7, #7]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_InitTick+0x6c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d023      	beq.n	8000ce0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <HAL_InitTick+0x70>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_InitTick+0x6c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f949 	bl	8000f46 <HAL_SYSTICK_Config>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10f      	bne.n	8000cda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d809      	bhi.n	8000cd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f000 f913 	bl	8000ef2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_InitTick+0x74>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	e007      	b.n	8000ce4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e004      	b.n	8000ce4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	73fb      	strb	r3, [r7, #15]
 8000cde:	e001      	b.n	8000ce4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000004 	.word	0x20000004

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	200000e0 	.word	0x200000e0

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	200000e0 	.word	0x200000e0

08000d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	60d3      	str	r3, [r2, #12]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_GetPriorityGrouping+0x18>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f003 0307 	and.w	r3, r3, #7
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db0b      	blt.n	8000dca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	4907      	ldr	r1, [pc, #28]	; (8000dd8 <__NVIC_EnableIRQ+0x38>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea8:	d301      	bcc.n	8000eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00f      	b.n	8000ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <SysTick_Config+0x40>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f7ff ff8e 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff29 	bl	8000d3c <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff3e 	bl	8000d84 <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ff8e 	bl	8000e30 <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff5d 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff31 	bl	8000da0 <__NVIC_EnableIRQ>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffa2 	bl	8000e98 <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b087      	sub	sp, #28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f6e:	e17f      	b.n	8001270 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	2101      	movs	r1, #1
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8171 	beq.w	800126a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d005      	beq.n	8000fa0 <HAL_GPIO_Init+0x40>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d130      	bne.n	8001002 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	f003 0201 	and.w	r2, r3, #1
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b03      	cmp	r3, #3
 800100c:	d118      	bne.n	8001040 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001014:	2201      	movs	r2, #1
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	08db      	lsrs	r3, r3, #3
 800102a:	f003 0201 	and.w	r2, r3, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b03      	cmp	r3, #3
 800104a:	d017      	beq.n	800107c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d123      	bne.n	80010d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	08da      	lsrs	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	6939      	ldr	r1, [r7, #16]
 80010cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0203 	and.w	r2, r3, #3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80ac 	beq.w	800126a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	4b5f      	ldr	r3, [pc, #380]	; (8001290 <HAL_GPIO_Init+0x330>)
 8001114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001116:	4a5e      	ldr	r2, [pc, #376]	; (8001290 <HAL_GPIO_Init+0x330>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6613      	str	r3, [r2, #96]	; 0x60
 800111e:	4b5c      	ldr	r3, [pc, #368]	; (8001290 <HAL_GPIO_Init+0x330>)
 8001120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800112a:	4a5a      	ldr	r2, [pc, #360]	; (8001294 <HAL_GPIO_Init+0x334>)
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001154:	d025      	beq.n	80011a2 <HAL_GPIO_Init+0x242>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4f      	ldr	r2, [pc, #316]	; (8001298 <HAL_GPIO_Init+0x338>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d01f      	beq.n	800119e <HAL_GPIO_Init+0x23e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4e      	ldr	r2, [pc, #312]	; (800129c <HAL_GPIO_Init+0x33c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d019      	beq.n	800119a <HAL_GPIO_Init+0x23a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4d      	ldr	r2, [pc, #308]	; (80012a0 <HAL_GPIO_Init+0x340>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d013      	beq.n	8001196 <HAL_GPIO_Init+0x236>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4c      	ldr	r2, [pc, #304]	; (80012a4 <HAL_GPIO_Init+0x344>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d00d      	beq.n	8001192 <HAL_GPIO_Init+0x232>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4b      	ldr	r2, [pc, #300]	; (80012a8 <HAL_GPIO_Init+0x348>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d007      	beq.n	800118e <HAL_GPIO_Init+0x22e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4a      	ldr	r2, [pc, #296]	; (80012ac <HAL_GPIO_Init+0x34c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d101      	bne.n	800118a <HAL_GPIO_Init+0x22a>
 8001186:	2306      	movs	r3, #6
 8001188:	e00c      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 800118a:	2307      	movs	r3, #7
 800118c:	e00a      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 800118e:	2305      	movs	r3, #5
 8001190:	e008      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 8001192:	2304      	movs	r3, #4
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 8001196:	2303      	movs	r3, #3
 8001198:	e004      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 800119a:	2302      	movs	r3, #2
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 80011a2:	2300      	movs	r3, #0
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	f002 0203 	and.w	r2, r2, #3
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	4093      	lsls	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011b4:	4937      	ldr	r1, [pc, #220]	; (8001294 <HAL_GPIO_Init+0x334>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011c2:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <HAL_GPIO_Init+0x350>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011e6:	4a32      	ldr	r2, [pc, #200]	; (80012b0 <HAL_GPIO_Init+0x350>)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011ec:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <HAL_GPIO_Init+0x350>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001210:	4a27      	ldr	r2, [pc, #156]	; (80012b0 <HAL_GPIO_Init+0x350>)
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001216:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <HAL_GPIO_Init+0x350>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800123a:	4a1d      	ldr	r2, [pc, #116]	; (80012b0 <HAL_GPIO_Init+0x350>)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <HAL_GPIO_Init+0x350>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001264:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <HAL_GPIO_Init+0x350>)
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa22 f303 	lsr.w	r3, r2, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	f47f ae78 	bne.w	8000f70 <HAL_GPIO_Init+0x10>
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	371c      	adds	r7, #28
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000
 8001294:	40010000 	.word	0x40010000
 8001298:	48000400 	.word	0x48000400
 800129c:	48000800 	.word	0x48000800
 80012a0:	48000c00 	.word	0x48000c00
 80012a4:	48001000 	.word	0x48001000
 80012a8:	48001400 	.word	0x48001400
 80012ac:	48001800 	.word	0x48001800
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4013      	ands	r3, r2
 80012fc:	041a      	lsls	r2, r3, #16
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43d9      	mvns	r1, r3
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	400b      	ands	r3, r1
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	619a      	str	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001324:	695a      	ldr	r2, [r3, #20]
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	4013      	ands	r3, r2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d006      	beq.n	800133c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800132e:	4a05      	ldr	r2, [pc, #20]	; (8001344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f8c4 	bl	80004c4 <HAL_GPIO_EXTI_Callback>
  }
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40010400 	.word	0x40010400

08001348 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <HAL_PWREx_GetVoltageRange+0x18>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40007000 	.word	0x40007000

08001364 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001372:	d130      	bne.n	80013d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001374:	4b23      	ldr	r3, [pc, #140]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800137c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001380:	d038      	beq.n	80013f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800138a:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001390:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2232      	movs	r2, #50	; 0x32
 8001398:	fb02 f303 	mul.w	r3, r2, r3
 800139c:	4a1b      	ldr	r2, [pc, #108]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	0c9b      	lsrs	r3, r3, #18
 80013a4:	3301      	adds	r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013a8:	e002      	b.n	80013b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013bc:	d102      	bne.n	80013c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f2      	bne.n	80013aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d0:	d110      	bne.n	80013f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e00f      	b.n	80013f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e2:	d007      	beq.n	80013f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ec:	4a05      	ldr	r2, [pc, #20]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40007000 	.word	0x40007000
 8001408:	20000000 	.word	0x20000000
 800140c:	431bde83 	.word	0x431bde83

08001410 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e3ca      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001422:	4b97      	ldr	r3, [pc, #604]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800142c:	4b94      	ldr	r3, [pc, #592]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 80e4 	beq.w	800160c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <HAL_RCC_OscConfig+0x4a>
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b0c      	cmp	r3, #12
 800144e:	f040 808b 	bne.w	8001568 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	2b01      	cmp	r3, #1
 8001456:	f040 8087 	bne.w	8001568 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800145a:	4b89      	ldr	r3, [pc, #548]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d005      	beq.n	8001472 <HAL_RCC_OscConfig+0x62>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e3a2      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a1a      	ldr	r2, [r3, #32]
 8001476:	4b82      	ldr	r3, [pc, #520]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d004      	beq.n	800148c <HAL_RCC_OscConfig+0x7c>
 8001482:	4b7f      	ldr	r3, [pc, #508]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800148a:	e005      	b.n	8001498 <HAL_RCC_OscConfig+0x88>
 800148c:	4b7c      	ldr	r3, [pc, #496]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 800148e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001498:	4293      	cmp	r3, r2
 800149a:	d223      	bcs.n	80014e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fd55 	bl	8001f50 <RCC_SetFlashLatencyFromMSIRange>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e383      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b0:	4b73      	ldr	r3, [pc, #460]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a72      	ldr	r2, [pc, #456]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80014b6:	f043 0308 	orr.w	r3, r3, #8
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b70      	ldr	r3, [pc, #448]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	496d      	ldr	r1, [pc, #436]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ce:	4b6c      	ldr	r3, [pc, #432]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	4968      	ldr	r1, [pc, #416]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]
 80014e2:	e025      	b.n	8001530 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014e4:	4b66      	ldr	r3, [pc, #408]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a65      	ldr	r2, [pc, #404]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80014ea:	f043 0308 	orr.w	r3, r3, #8
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b63      	ldr	r3, [pc, #396]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4960      	ldr	r1, [pc, #384]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001502:	4b5f      	ldr	r3, [pc, #380]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	495b      	ldr	r1, [pc, #364]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 8001512:	4313      	orrs	r3, r2
 8001514:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d109      	bne.n	8001530 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4618      	mov	r0, r3
 8001522:	f000 fd15 	bl	8001f50 <RCC_SetFlashLatencyFromMSIRange>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e343      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001530:	f000 fc4a 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001534:	4602      	mov	r2, r0
 8001536:	4b52      	ldr	r3, [pc, #328]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	091b      	lsrs	r3, r3, #4
 800153c:	f003 030f 	and.w	r3, r3, #15
 8001540:	4950      	ldr	r1, [pc, #320]	; (8001684 <HAL_RCC_OscConfig+0x274>)
 8001542:	5ccb      	ldrb	r3, [r1, r3]
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	fa22 f303 	lsr.w	r3, r2, r3
 800154c:	4a4e      	ldr	r2, [pc, #312]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800154e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001550:	4b4e      	ldr	r3, [pc, #312]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fb95 	bl	8000c84 <HAL_InitTick>
 800155a:	4603      	mov	r3, r0
 800155c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d052      	beq.n	800160a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	e327      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d032      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001570:	4b43      	ldr	r3, [pc, #268]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a42      	ldr	r2, [pc, #264]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800157c:	f7ff fbd2 	bl	8000d24 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001584:	f7ff fbce 	bl	8000d24 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e310      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001596:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015a2:	4b37      	ldr	r3, [pc, #220]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a36      	ldr	r2, [pc, #216]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80015a8:	f043 0308 	orr.w	r3, r3, #8
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b34      	ldr	r3, [pc, #208]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	4931      	ldr	r1, [pc, #196]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c0:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	492c      	ldr	r1, [pc, #176]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
 80015d4:	e01a      	b.n	800160c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a29      	ldr	r2, [pc, #164]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015e2:	f7ff fb9f 	bl	8000d24 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ea:	f7ff fb9b 	bl	8000d24 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e2dd      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015fc:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f0      	bne.n	80015ea <HAL_RCC_OscConfig+0x1da>
 8001608:	e000      	b.n	800160c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800160a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d074      	beq.n	8001702 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2b08      	cmp	r3, #8
 800161c:	d005      	beq.n	800162a <HAL_RCC_OscConfig+0x21a>
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	2b0c      	cmp	r3, #12
 8001622:	d10e      	bne.n	8001642 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d10b      	bne.n	8001642 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d064      	beq.n	8001700 <HAL_RCC_OscConfig+0x2f0>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d160      	bne.n	8001700 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e2ba      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164a:	d106      	bne.n	800165a <HAL_RCC_OscConfig+0x24a>
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 8001652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	e026      	b.n	80016a8 <HAL_RCC_OscConfig+0x298>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001662:	d115      	bne.n	8001690 <HAL_RCC_OscConfig+0x280>
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a05      	ldr	r2, [pc, #20]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 800166a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a02      	ldr	r2, [pc, #8]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 8001676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	e014      	b.n	80016a8 <HAL_RCC_OscConfig+0x298>
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	0800355c 	.word	0x0800355c
 8001688:	20000000 	.word	0x20000000
 800168c:	20000004 	.word	0x20000004
 8001690:	4ba0      	ldr	r3, [pc, #640]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a9f      	ldr	r2, [pc, #636]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 8001696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b9d      	ldr	r3, [pc, #628]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a9c      	ldr	r2, [pc, #624]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 80016a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d013      	beq.n	80016d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb38 	bl	8000d24 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fb34 	bl	8000d24 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	; 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e276      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ca:	4b92      	ldr	r3, [pc, #584]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x2a8>
 80016d6:	e014      	b.n	8001702 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff fb24 	bl	8000d24 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fb20 	bl	8000d24 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e262      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016f2:	4b88      	ldr	r3, [pc, #544]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x2d0>
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d060      	beq.n	80017d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	2b04      	cmp	r3, #4
 8001712:	d005      	beq.n	8001720 <HAL_RCC_OscConfig+0x310>
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2b0c      	cmp	r3, #12
 8001718:	d119      	bne.n	800174e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d116      	bne.n	800174e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001720:	4b7c      	ldr	r3, [pc, #496]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_OscConfig+0x328>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e23f      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001738:	4b76      	ldr	r3, [pc, #472]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	061b      	lsls	r3, r3, #24
 8001746:	4973      	ldr	r1, [pc, #460]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800174c:	e040      	b.n	80017d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d023      	beq.n	800179e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001756:	4b6f      	ldr	r3, [pc, #444]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a6e      	ldr	r2, [pc, #440]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 800175c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7ff fadf 	bl	8000d24 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff fadb 	bl	8000d24 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e21d      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800177c:	4b65      	ldr	r3, [pc, #404]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001788:	4b62      	ldr	r3, [pc, #392]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	061b      	lsls	r3, r3, #24
 8001796:	495f      	ldr	r1, [pc, #380]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
 800179c:	e018      	b.n	80017d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800179e:	4b5d      	ldr	r3, [pc, #372]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a5c      	ldr	r2, [pc, #368]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 80017a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017aa:	f7ff fabb 	bl	8000d24 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b2:	f7ff fab7 	bl	8000d24 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e1f9      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017c4:	4b53      	ldr	r3, [pc, #332]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f0      	bne.n	80017b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d03c      	beq.n	8001856 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d01c      	beq.n	800181e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e4:	4b4b      	ldr	r3, [pc, #300]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 80017e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ea:	4a4a      	ldr	r2, [pc, #296]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f4:	f7ff fa96 	bl	8000d24 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017fc:	f7ff fa92 	bl	8000d24 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e1d4      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800180e:	4b41      	ldr	r3, [pc, #260]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 8001810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0ef      	beq.n	80017fc <HAL_RCC_OscConfig+0x3ec>
 800181c:	e01b      	b.n	8001856 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800181e:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 8001820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001824:	4a3b      	ldr	r2, [pc, #236]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182e:	f7ff fa79 	bl	8000d24 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001836:	f7ff fa75 	bl	8000d24 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e1b7      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001848:	4b32      	ldr	r3, [pc, #200]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 800184a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1ef      	bne.n	8001836 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 80a6 	beq.w	80019b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001868:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10d      	bne.n	8001890 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001878:	4a26      	ldr	r2, [pc, #152]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 800187a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187e:	6593      	str	r3, [r2, #88]	; 0x58
 8001880:	4b24      	ldr	r3, [pc, #144]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800188c:	2301      	movs	r3, #1
 800188e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001890:	4b21      	ldr	r3, [pc, #132]	; (8001918 <HAL_RCC_OscConfig+0x508>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001898:	2b00      	cmp	r3, #0
 800189a:	d118      	bne.n	80018ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800189c:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <HAL_RCC_OscConfig+0x508>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a1d      	ldr	r2, [pc, #116]	; (8001918 <HAL_RCC_OscConfig+0x508>)
 80018a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a8:	f7ff fa3c 	bl	8000d24 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b0:	f7ff fa38 	bl	8000d24 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e17a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_RCC_OscConfig+0x508>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d108      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4d8>
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 80018d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018dc:	4a0d      	ldr	r2, [pc, #52]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e6:	e029      	b.n	800193c <HAL_RCC_OscConfig+0x52c>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b05      	cmp	r3, #5
 80018ee:	d115      	bne.n	800191c <HAL_RCC_OscConfig+0x50c>
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 80018f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f6:	4a07      	ldr	r2, [pc, #28]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 8001902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001906:	4a03      	ldr	r2, [pc, #12]	; (8001914 <HAL_RCC_OscConfig+0x504>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001910:	e014      	b.n	800193c <HAL_RCC_OscConfig+0x52c>
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	40007000 	.word	0x40007000
 800191c:	4b9c      	ldr	r3, [pc, #624]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 800191e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001922:	4a9b      	ldr	r2, [pc, #620]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800192c:	4b98      	ldr	r3, [pc, #608]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001932:	4a97      	ldr	r2, [pc, #604]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001934:	f023 0304 	bic.w	r3, r3, #4
 8001938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d016      	beq.n	8001972 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff f9ee 	bl	8000d24 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800194a:	e00a      	b.n	8001962 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f7ff f9ea 	bl	8000d24 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e12a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001962:	4b8b      	ldr	r3, [pc, #556]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0ed      	beq.n	800194c <HAL_RCC_OscConfig+0x53c>
 8001970:	e015      	b.n	800199e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001972:	f7ff f9d7 	bl	8000d24 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7ff f9d3 	bl	8000d24 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f241 3288 	movw	r2, #5000	; 0x1388
 8001988:	4293      	cmp	r3, r2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e113      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001990:	4b7f      	ldr	r3, [pc, #508]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ed      	bne.n	800197a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800199e:	7ffb      	ldrb	r3, [r7, #31]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d105      	bne.n	80019b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a4:	4b7a      	ldr	r3, [pc, #488]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a8:	4a79      	ldr	r2, [pc, #484]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 80019aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80fe 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	2b02      	cmp	r3, #2
 80019c0:	f040 80d0 	bne.w	8001b64 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019c4:	4b72      	ldr	r3, [pc, #456]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f003 0203 	and.w	r2, r3, #3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d130      	bne.n	8001a3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	3b01      	subs	r3, #1
 80019e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d127      	bne.n	8001a3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d11f      	bne.n	8001a3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a04:	2a07      	cmp	r2, #7
 8001a06:	bf14      	ite	ne
 8001a08:	2201      	movne	r2, #1
 8001a0a:	2200      	moveq	r2, #0
 8001a0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d113      	bne.n	8001a3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1c:	085b      	lsrs	r3, r3, #1
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d109      	bne.n	8001a3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	3b01      	subs	r3, #1
 8001a34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d06e      	beq.n	8001b18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b0c      	cmp	r3, #12
 8001a3e:	d069      	beq.n	8001b14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a40:	4b53      	ldr	r3, [pc, #332]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d105      	bne.n	8001a58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a4c:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0ad      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a5c:	4b4c      	ldr	r3, [pc, #304]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a4b      	ldr	r2, [pc, #300]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a68:	f7ff f95c 	bl	8000d24 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff f958 	bl	8000d24 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e09a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a82:	4b43      	ldr	r3, [pc, #268]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a8e:	4b40      	ldr	r3, [pc, #256]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	4b40      	ldr	r3, [pc, #256]	; (8001b94 <HAL_RCC_OscConfig+0x784>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a9e:	3a01      	subs	r2, #1
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	4311      	orrs	r1, r2
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001aa8:	0212      	lsls	r2, r2, #8
 8001aaa:	4311      	orrs	r1, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ab0:	0852      	lsrs	r2, r2, #1
 8001ab2:	3a01      	subs	r2, #1
 8001ab4:	0552      	lsls	r2, r2, #21
 8001ab6:	4311      	orrs	r1, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001abc:	0852      	lsrs	r2, r2, #1
 8001abe:	3a01      	subs	r2, #1
 8001ac0:	0652      	lsls	r2, r2, #25
 8001ac2:	4311      	orrs	r1, r2
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ac8:	0912      	lsrs	r2, r2, #4
 8001aca:	0452      	lsls	r2, r2, #17
 8001acc:	430a      	orrs	r2, r1
 8001ace:	4930      	ldr	r1, [pc, #192]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ad4:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a2d      	ldr	r2, [pc, #180]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ade:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4a2a      	ldr	r2, [pc, #168]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001aec:	f7ff f91a 	bl	8000d24 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff f916 	bl	8000d24 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e058      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b06:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b12:	e050      	b.n	8001bb6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e04f      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d148      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b24:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a19      	ldr	r2, [pc, #100]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	4a16      	ldr	r2, [pc, #88]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b3c:	f7ff f8f2 	bl	8000d24 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b44:	f7ff f8ee 	bl	8000d24 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e030      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x734>
 8001b62:	e028      	b.n	8001bb6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2b0c      	cmp	r3, #12
 8001b68:	d023      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_RCC_OscConfig+0x780>)
 8001b70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b76:	f7ff f8d5 	bl	8000d24 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7c:	e00c      	b.n	8001b98 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7ff f8d1 	bl	8000d24 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d905      	bls.n	8001b98 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e013      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
 8001b90:	40021000 	.word	0x40021000
 8001b94:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_RCC_OscConfig+0x7b0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1ec      	bne.n	8001b7e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_RCC_OscConfig+0x7b0>)
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	4905      	ldr	r1, [pc, #20]	; (8001bc0 <HAL_RCC_OscConfig+0x7b0>)
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_RCC_OscConfig+0x7b4>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	60cb      	str	r3, [r1, #12]
 8001bb0:	e001      	b.n	8001bb6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3720      	adds	r7, #32
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	feeefffc 	.word	0xfeeefffc

08001bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0e7      	b.n	8001dac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b75      	ldr	r3, [pc, #468]	; (8001db4 <HAL_RCC_ClockConfig+0x1ec>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d910      	bls.n	8001c0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b72      	ldr	r3, [pc, #456]	; (8001db4 <HAL_RCC_ClockConfig+0x1ec>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 0207 	bic.w	r2, r3, #7
 8001bf2:	4970      	ldr	r1, [pc, #448]	; (8001db4 <HAL_RCC_ClockConfig+0x1ec>)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b6e      	ldr	r3, [pc, #440]	; (8001db4 <HAL_RCC_ClockConfig+0x1ec>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0cf      	b.n	8001dac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d010      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	4b66      	ldr	r3, [pc, #408]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d908      	bls.n	8001c3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c28:	4b63      	ldr	r3, [pc, #396]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	4960      	ldr	r1, [pc, #384]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d04c      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4e:	4b5a      	ldr	r3, [pc, #360]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d121      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e0a6      	b.n	8001dac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c66:	4b54      	ldr	r3, [pc, #336]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d115      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e09a      	b.n	8001dac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c7e:	4b4e      	ldr	r3, [pc, #312]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e08e      	b.n	8001dac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c8e:	4b4a      	ldr	r3, [pc, #296]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e086      	b.n	8001dac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c9e:	4b46      	ldr	r3, [pc, #280]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f023 0203 	bic.w	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4943      	ldr	r1, [pc, #268]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cb0:	f7ff f838 	bl	8000d24 <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb8:	f7ff f834 	bl	8000d24 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e06e      	b.n	8001dac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	4b3a      	ldr	r3, [pc, #232]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 020c 	and.w	r2, r3, #12
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1eb      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d010      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d208      	bcs.n	8001d0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cfc:	4b2e      	ldr	r3, [pc, #184]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	492b      	ldr	r1, [pc, #172]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d0e:	4b29      	ldr	r3, [pc, #164]	; (8001db4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d210      	bcs.n	8001d3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1c:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 0207 	bic.w	r2, r3, #7
 8001d24:	4923      	ldr	r1, [pc, #140]	; (8001db4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e036      	b.n	8001dac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d008      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	4918      	ldr	r1, [pc, #96]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d009      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d68:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4910      	ldr	r1, [pc, #64]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d7c:	f000 f824 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	490b      	ldr	r1, [pc, #44]	; (8001dbc <HAL_RCC_ClockConfig+0x1f4>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
 8001d98:	4a09      	ldr	r2, [pc, #36]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_RCC_ClockConfig+0x1fc>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe ff6f 	bl	8000c84 <HAL_InitTick>
 8001da6:	4603      	mov	r3, r0
 8001da8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001daa:	7afb      	ldrb	r3, [r7, #11]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40022000 	.word	0x40022000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	0800355c 	.word	0x0800355c
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000004 	.word	0x20000004

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd6:	4b3e      	ldr	r3, [pc, #248]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de0:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x34>
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2b0c      	cmp	r3, #12
 8001df4:	d121      	bne.n	8001e3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d11e      	bne.n	8001e3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dfc:	4b34      	ldr	r3, [pc, #208]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d107      	bne.n	8001e18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e08:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	e005      	b.n	8001e24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e18:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e24:	4a2b      	ldr	r2, [pc, #172]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10d      	bne.n	8001e50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d102      	bne.n	8001e46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e40:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e42:	61bb      	str	r3, [r7, #24]
 8001e44:	e004      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e4c:	4b23      	ldr	r3, [pc, #140]	; (8001edc <HAL_RCC_GetSysClockFreq+0x114>)
 8001e4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	2b0c      	cmp	r3, #12
 8001e54:	d134      	bne.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e56:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d003      	beq.n	8001e6e <HAL_RCC_GetSysClockFreq+0xa6>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d003      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0xac>
 8001e6c:	e005      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e70:	617b      	str	r3, [r7, #20]
      break;
 8001e72:	e005      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_RCC_GetSysClockFreq+0x114>)
 8001e76:	617b      	str	r3, [r7, #20]
      break;
 8001e78:	e002      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	617b      	str	r3, [r7, #20]
      break;
 8001e7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	fb03 f202 	mul.w	r2, r3, r2
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	0e5b      	lsrs	r3, r3, #25
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ec0:	69bb      	ldr	r3, [r7, #24]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3724      	adds	r7, #36	; 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08003574 	.word	0x08003574
 8001ed8:	00f42400 	.word	0x00f42400
 8001edc:	007a1200 	.word	0x007a1200

08001ee0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000000 	.word	0x20000000

08001ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001efc:	f7ff fff0 	bl	8001ee0 <HAL_RCC_GetHCLKFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	4904      	ldr	r1, [pc, #16]	; (8001f20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	0800356c 	.word	0x0800356c

08001f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f28:	f7ff ffda 	bl	8001ee0 <HAL_RCC_GetHCLKFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	0adb      	lsrs	r3, r3, #11
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	4904      	ldr	r1, [pc, #16]	; (8001f4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	0800356c 	.word	0x0800356c

08001f50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f68:	f7ff f9ee 	bl	8001348 <HAL_PWREx_GetVoltageRange>
 8001f6c:	6178      	str	r0, [r7, #20]
 8001f6e:	e014      	b.n	8001f9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	4a24      	ldr	r2, [pc, #144]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7c:	4b22      	ldr	r3, [pc, #136]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f88:	f7ff f9de 	bl	8001348 <HAL_PWREx_GetVoltageRange>
 8001f8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	4a1d      	ldr	r2, [pc, #116]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa0:	d10b      	bne.n	8001fba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b80      	cmp	r3, #128	; 0x80
 8001fa6:	d919      	bls.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2ba0      	cmp	r3, #160	; 0xa0
 8001fac:	d902      	bls.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fae:	2302      	movs	r3, #2
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	e013      	b.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	e010      	b.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b80      	cmp	r3, #128	; 0x80
 8001fbe:	d902      	bls.n	8001fc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	e00a      	b.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b80      	cmp	r3, #128	; 0x80
 8001fca:	d102      	bne.n	8001fd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fcc:	2302      	movs	r3, #2
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	e004      	b.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b70      	cmp	r3, #112	; 0x70
 8001fd6:	d101      	bne.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fd8:	2301      	movs	r3, #1
 8001fda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 0207 	bic.w	r2, r3, #7
 8001fe4:	4909      	ldr	r1, [pc, #36]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d001      	beq.n	8001ffe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	40022000 	.word	0x40022000

08002010 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002018:	2300      	movs	r3, #0
 800201a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800201c:	2300      	movs	r3, #0
 800201e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002028:	2b00      	cmp	r3, #0
 800202a:	d041      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002030:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002034:	d02a      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002036:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800203a:	d824      	bhi.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800203c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002040:	d008      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002042:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002046:	d81e      	bhi.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00a      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800204c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002050:	d010      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002052:	e018      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002054:	4b86      	ldr	r3, [pc, #536]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4a85      	ldr	r2, [pc, #532]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002060:	e015      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3304      	adds	r3, #4
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f000 fabb 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 800206e:	4603      	mov	r3, r0
 8002070:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002072:	e00c      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3320      	adds	r3, #32
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fba6 	bl	80027cc <RCCEx_PLLSAI2_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002084:	e003      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	74fb      	strb	r3, [r7, #19]
      break;
 800208a:	e000      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800208c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800208e:	7cfb      	ldrb	r3, [r7, #19]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10b      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002094:	4b76      	ldr	r3, [pc, #472]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020a2:	4973      	ldr	r1, [pc, #460]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020aa:	e001      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020ac:	7cfb      	ldrb	r3, [r7, #19]
 80020ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d041      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020c4:	d02a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020ca:	d824      	bhi.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020d0:	d008      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020d6:	d81e      	bhi.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e0:	d010      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020e2:	e018      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020e4:	4b62      	ldr	r3, [pc, #392]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4a61      	ldr	r2, [pc, #388]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020f0:	e015      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3304      	adds	r3, #4
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 fa73 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 80020fe:	4603      	mov	r3, r0
 8002100:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002102:	e00c      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3320      	adds	r3, #32
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f000 fb5e 	bl	80027cc <RCCEx_PLLSAI2_Config>
 8002110:	4603      	mov	r3, r0
 8002112:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002114:	e003      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	74fb      	strb	r3, [r7, #19]
      break;
 800211a:	e000      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800211c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800211e:	7cfb      	ldrb	r3, [r7, #19]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10b      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002124:	4b52      	ldr	r3, [pc, #328]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002132:	494f      	ldr	r1, [pc, #316]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800213a:	e001      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80a0 	beq.w	800228e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002152:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002162:	2300      	movs	r3, #0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00d      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002168:	4b41      	ldr	r3, [pc, #260]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	4a40      	ldr	r2, [pc, #256]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002172:	6593      	str	r3, [r2, #88]	; 0x58
 8002174:	4b3e      	ldr	r3, [pc, #248]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002180:	2301      	movs	r3, #1
 8002182:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002184:	4b3b      	ldr	r3, [pc, #236]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a3a      	ldr	r2, [pc, #232]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800218a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002190:	f7fe fdc8 	bl	8000d24 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002196:	e009      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002198:	f7fe fdc4 	bl	8000d24 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d902      	bls.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	74fb      	strb	r3, [r7, #19]
        break;
 80021aa:	e005      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ac:	4b31      	ldr	r3, [pc, #196]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0ef      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021b8:	7cfb      	ldrb	r3, [r7, #19]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d15c      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021be:	4b2c      	ldr	r3, [pc, #176]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01f      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d019      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021dc:	4b24      	ldr	r3, [pc, #144]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021e8:	4b21      	ldr	r3, [pc, #132]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	4a20      	ldr	r2, [pc, #128]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	4a1c      	ldr	r2, [pc, #112]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002208:	4a19      	ldr	r2, [pc, #100]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d016      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7fe fd83 	bl	8000d24 <HAL_GetTick>
 800221e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002220:	e00b      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7fe fd7f 	bl	8000d24 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d902      	bls.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	74fb      	strb	r3, [r7, #19]
            break;
 8002238:	e006      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0ec      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10c      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002254:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800225e:	4904      	ldr	r1, [pc, #16]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002266:	e009      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	74bb      	strb	r3, [r7, #18]
 800226c:	e006      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
 8002274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800227c:	7c7b      	ldrb	r3, [r7, #17]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d105      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002282:	4b9e      	ldr	r3, [pc, #632]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	4a9d      	ldr	r2, [pc, #628]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800229a:	4b98      	ldr	r3, [pc, #608]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a0:	f023 0203 	bic.w	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	4994      	ldr	r1, [pc, #592]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022bc:	4b8f      	ldr	r3, [pc, #572]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c2:	f023 020c 	bic.w	r2, r3, #12
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	498c      	ldr	r1, [pc, #560]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022de:	4b87      	ldr	r3, [pc, #540]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	4983      	ldr	r1, [pc, #524]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002300:	4b7e      	ldr	r3, [pc, #504]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002306:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	497b      	ldr	r1, [pc, #492]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002322:	4b76      	ldr	r3, [pc, #472]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002330:	4972      	ldr	r1, [pc, #456]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002344:	4b6d      	ldr	r3, [pc, #436]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	496a      	ldr	r1, [pc, #424]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002366:	4b65      	ldr	r3, [pc, #404]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002374:	4961      	ldr	r1, [pc, #388]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002388:	4b5c      	ldr	r3, [pc, #368]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002396:	4959      	ldr	r1, [pc, #356]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023aa:	4b54      	ldr	r3, [pc, #336]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b8:	4950      	ldr	r1, [pc, #320]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023cc:	4b4b      	ldr	r3, [pc, #300]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	4948      	ldr	r1, [pc, #288]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ee:	4b43      	ldr	r3, [pc, #268]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	493f      	ldr	r1, [pc, #252]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d028      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002410:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800241e:	4937      	ldr	r1, [pc, #220]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800242a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800242e:	d106      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002430:	4b32      	ldr	r3, [pc, #200]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a31      	ldr	r2, [pc, #196]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800243a:	60d3      	str	r3, [r2, #12]
 800243c:	e011      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002442:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002446:	d10c      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3304      	adds	r3, #4
 800244c:	2101      	movs	r1, #1
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f8c8 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800245e:	7cfb      	ldrb	r3, [r7, #19]
 8002460:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d028      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800246e:	4b23      	ldr	r3, [pc, #140]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002474:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	491f      	ldr	r1, [pc, #124]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800248c:	d106      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800248e:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	4a1a      	ldr	r2, [pc, #104]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002498:	60d3      	str	r3, [r2, #12]
 800249a:	e011      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2101      	movs	r1, #1
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 f899 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 80024b2:	4603      	mov	r3, r0
 80024b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b6:	7cfb      	ldrb	r3, [r7, #19]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d02b      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024da:	4908      	ldr	r1, [pc, #32]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ea:	d109      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ec:	4b03      	ldr	r3, [pc, #12]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4a02      	ldr	r2, [pc, #8]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f6:	60d3      	str	r3, [r2, #12]
 80024f8:	e014      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002508:	d10c      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3304      	adds	r3, #4
 800250e:	2101      	movs	r1, #1
 8002510:	4618      	mov	r0, r3
 8002512:	f000 f867 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 8002516:	4603      	mov	r3, r0
 8002518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d02f      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002530:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800253e:	4928      	ldr	r1, [pc, #160]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800254a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800254e:	d10d      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	2102      	movs	r1, #2
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f844 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d014      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002566:	7cfb      	ldrb	r3, [r7, #19]
 8002568:	74bb      	strb	r3, [r7, #18]
 800256a:	e011      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002574:	d10c      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3320      	adds	r3, #32
 800257a:	2102      	movs	r1, #2
 800257c:	4618      	mov	r0, r3
 800257e:	f000 f925 	bl	80027cc <RCCEx_PLLSAI2_Config>
 8002582:	4603      	mov	r3, r0
 8002584:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002586:	7cfb      	ldrb	r3, [r7, #19]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800258c:	7cfb      	ldrb	r3, [r7, #19]
 800258e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800259c:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025aa:	490d      	ldr	r1, [pc, #52]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ce:	4904      	ldr	r1, [pc, #16]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000

080025e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025f2:	4b75      	ldr	r3, [pc, #468]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d018      	beq.n	8002630 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025fe:	4b72      	ldr	r3, [pc, #456]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0203 	and.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d10d      	bne.n	800262a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
       ||
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002616:	4b6c      	ldr	r3, [pc, #432]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
       ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d047      	beq.n	80026ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	e044      	b.n	80026ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d018      	beq.n	800266a <RCCEx_PLLSAI1_Config+0x86>
 8002638:	2b03      	cmp	r3, #3
 800263a:	d825      	bhi.n	8002688 <RCCEx_PLLSAI1_Config+0xa4>
 800263c:	2b01      	cmp	r3, #1
 800263e:	d002      	beq.n	8002646 <RCCEx_PLLSAI1_Config+0x62>
 8002640:	2b02      	cmp	r3, #2
 8002642:	d009      	beq.n	8002658 <RCCEx_PLLSAI1_Config+0x74>
 8002644:	e020      	b.n	8002688 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002646:	4b60      	ldr	r3, [pc, #384]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d11d      	bne.n	800268e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002656:	e01a      	b.n	800268e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002658:	4b5b      	ldr	r3, [pc, #364]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d116      	bne.n	8002692 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002668:	e013      	b.n	8002692 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800266a:	4b57      	ldr	r3, [pc, #348]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10f      	bne.n	8002696 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002676:	4b54      	ldr	r3, [pc, #336]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002686:	e006      	b.n	8002696 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
      break;
 800268c:	e004      	b.n	8002698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800268e:	bf00      	nop
 8002690:	e002      	b.n	8002698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002692:	bf00      	nop
 8002694:	e000      	b.n	8002698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002696:	bf00      	nop
    }

    if(status == HAL_OK)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10d      	bne.n	80026ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800269e:	4b4a      	ldr	r3, [pc, #296]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	430b      	orrs	r3, r1
 80026b4:	4944      	ldr	r1, [pc, #272]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d17d      	bne.n	80027bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026c0:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a40      	ldr	r2, [pc, #256]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026cc:	f7fe fb2a 	bl	8000d24 <HAL_GetTick>
 80026d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026d2:	e009      	b.n	80026e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026d4:	f7fe fb26 	bl	8000d24 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d902      	bls.n	80026e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	73fb      	strb	r3, [r7, #15]
        break;
 80026e6:	e005      	b.n	80026f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026e8:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1ef      	bne.n	80026d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d160      	bne.n	80027bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d111      	bne.n	8002724 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002700:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6892      	ldr	r2, [r2, #8]
 8002710:	0211      	lsls	r1, r2, #8
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68d2      	ldr	r2, [r2, #12]
 8002716:	0912      	lsrs	r2, r2, #4
 8002718:	0452      	lsls	r2, r2, #17
 800271a:	430a      	orrs	r2, r1
 800271c:	492a      	ldr	r1, [pc, #168]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	610b      	str	r3, [r1, #16]
 8002722:	e027      	b.n	8002774 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d112      	bne.n	8002750 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800272a:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002732:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6892      	ldr	r2, [r2, #8]
 800273a:	0211      	lsls	r1, r2, #8
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6912      	ldr	r2, [r2, #16]
 8002740:	0852      	lsrs	r2, r2, #1
 8002742:	3a01      	subs	r2, #1
 8002744:	0552      	lsls	r2, r2, #21
 8002746:	430a      	orrs	r2, r1
 8002748:	491f      	ldr	r1, [pc, #124]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	610b      	str	r3, [r1, #16]
 800274e:	e011      	b.n	8002774 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002758:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6892      	ldr	r2, [r2, #8]
 8002760:	0211      	lsls	r1, r2, #8
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6952      	ldr	r2, [r2, #20]
 8002766:	0852      	lsrs	r2, r2, #1
 8002768:	3a01      	subs	r2, #1
 800276a:	0652      	lsls	r2, r2, #25
 800276c:	430a      	orrs	r2, r1
 800276e:	4916      	ldr	r1, [pc, #88]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002770:	4313      	orrs	r3, r2
 8002772:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002774:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800277a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800277e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7fe fad0 	bl	8000d24 <HAL_GetTick>
 8002784:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002786:	e009      	b.n	800279c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002788:	f7fe facc 	bl	8000d24 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d902      	bls.n	800279c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	73fb      	strb	r3, [r7, #15]
          break;
 800279a:	e005      	b.n	80027a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800279c:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0ef      	beq.n	8002788 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	4904      	ldr	r1, [pc, #16]	; (80027c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000

080027cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027da:	4b6a      	ldr	r3, [pc, #424]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d018      	beq.n	8002818 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027e6:	4b67      	ldr	r3, [pc, #412]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 0203 	and.w	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d10d      	bne.n	8002812 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
       ||
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d009      	beq.n	8002812 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027fe:	4b61      	ldr	r3, [pc, #388]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
       ||
 800280e:	429a      	cmp	r2, r3
 8002810:	d047      	beq.n	80028a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
 8002816:	e044      	b.n	80028a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d018      	beq.n	8002852 <RCCEx_PLLSAI2_Config+0x86>
 8002820:	2b03      	cmp	r3, #3
 8002822:	d825      	bhi.n	8002870 <RCCEx_PLLSAI2_Config+0xa4>
 8002824:	2b01      	cmp	r3, #1
 8002826:	d002      	beq.n	800282e <RCCEx_PLLSAI2_Config+0x62>
 8002828:	2b02      	cmp	r3, #2
 800282a:	d009      	beq.n	8002840 <RCCEx_PLLSAI2_Config+0x74>
 800282c:	e020      	b.n	8002870 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800282e:	4b55      	ldr	r3, [pc, #340]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d11d      	bne.n	8002876 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800283e:	e01a      	b.n	8002876 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002840:	4b50      	ldr	r3, [pc, #320]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d116      	bne.n	800287a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002850:	e013      	b.n	800287a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002852:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10f      	bne.n	800287e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800285e:	4b49      	ldr	r3, [pc, #292]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800286e:	e006      	b.n	800287e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
      break;
 8002874:	e004      	b.n	8002880 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002876:	bf00      	nop
 8002878:	e002      	b.n	8002880 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800287a:	bf00      	nop
 800287c:	e000      	b.n	8002880 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800287e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10d      	bne.n	80028a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002886:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6819      	ldr	r1, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	3b01      	subs	r3, #1
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	430b      	orrs	r3, r1
 800289c:	4939      	ldr	r1, [pc, #228]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d167      	bne.n	8002978 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028a8:	4b36      	ldr	r3, [pc, #216]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a35      	ldr	r2, [pc, #212]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b4:	f7fe fa36 	bl	8000d24 <HAL_GetTick>
 80028b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028ba:	e009      	b.n	80028d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028bc:	f7fe fa32 	bl	8000d24 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d902      	bls.n	80028d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	73fb      	strb	r3, [r7, #15]
        break;
 80028ce:	e005      	b.n	80028dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028d0:	4b2c      	ldr	r3, [pc, #176]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1ef      	bne.n	80028bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d14a      	bne.n	8002978 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d111      	bne.n	800290c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028e8:	4b26      	ldr	r3, [pc, #152]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6892      	ldr	r2, [r2, #8]
 80028f8:	0211      	lsls	r1, r2, #8
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68d2      	ldr	r2, [r2, #12]
 80028fe:	0912      	lsrs	r2, r2, #4
 8002900:	0452      	lsls	r2, r2, #17
 8002902:	430a      	orrs	r2, r1
 8002904:	491f      	ldr	r1, [pc, #124]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002906:	4313      	orrs	r3, r2
 8002908:	614b      	str	r3, [r1, #20]
 800290a:	e011      	b.n	8002930 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002914:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6892      	ldr	r2, [r2, #8]
 800291c:	0211      	lsls	r1, r2, #8
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6912      	ldr	r2, [r2, #16]
 8002922:	0852      	lsrs	r2, r2, #1
 8002924:	3a01      	subs	r2, #1
 8002926:	0652      	lsls	r2, r2, #25
 8002928:	430a      	orrs	r2, r1
 800292a:	4916      	ldr	r1, [pc, #88]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292c:	4313      	orrs	r3, r2
 800292e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002930:	4b14      	ldr	r3, [pc, #80]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a13      	ldr	r2, [pc, #76]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7fe f9f2 	bl	8000d24 <HAL_GetTick>
 8002940:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002942:	e009      	b.n	8002958 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002944:	f7fe f9ee 	bl	8000d24 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d902      	bls.n	8002958 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	73fb      	strb	r3, [r7, #15]
          break;
 8002956:	e005      	b.n	8002964 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0ef      	beq.n	8002944 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	4904      	ldr	r1, [pc, #16]	; (8002984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002974:	4313      	orrs	r3, r2
 8002976:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002978:	7bfb      	ldrb	r3, [r7, #15]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000

08002988 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e040      	b.n	8002a1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe f87a 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2224      	movs	r2, #36	; 0x24
 80029b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fb6a 	bl	80030a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f8af 	bl	8002b38 <UART_SetConfig>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e01b      	b.n	8002a1c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fbe9 	bl	80031ec <UART_CheckIdleState>
 8002a1a:	4603      	mov	r3, r0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	; 0x28
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	4613      	mov	r3, r2
 8002a32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d178      	bne.n	8002b2e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <HAL_UART_Transmit+0x24>
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e071      	b.n	8002b30 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2221      	movs	r2, #33	; 0x21
 8002a58:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a5a:	f7fe f963 	bl	8000d24 <HAL_GetTick>
 8002a5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	88fa      	ldrh	r2, [r7, #6]
 8002a64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	88fa      	ldrh	r2, [r7, #6]
 8002a6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a78:	d108      	bne.n	8002a8c <HAL_UART_Transmit+0x68>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d104      	bne.n	8002a8c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	e003      	b.n	8002a94 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a94:	e030      	b.n	8002af8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2180      	movs	r1, #128	; 0x80
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fc4b 	bl	800333c <UART_WaitOnFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d004      	beq.n	8002ab6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e03c      	b.n	8002b30 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10b      	bne.n	8002ad4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	881a      	ldrh	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ac8:	b292      	uxth	r2, r2
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	3302      	adds	r3, #2
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	e008      	b.n	8002ae6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	781a      	ldrb	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	b292      	uxth	r2, r2
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1c8      	bne.n	8002a96 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2140      	movs	r1, #64	; 0x40
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 fc14 	bl	800333c <UART_WaitOnFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d004      	beq.n	8002b24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e005      	b.n	8002b30 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e000      	b.n	8002b30 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002b2e:	2302      	movs	r3, #2
  }
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b3c:	b08a      	sub	sp, #40	; 0x28
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	4ba4      	ldr	r3, [pc, #656]	; (8002df8 <UART_SetConfig+0x2c0>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b70:	430b      	orrs	r3, r1
 8002b72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a99      	ldr	r2, [pc, #612]	; (8002dfc <UART_SetConfig+0x2c4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d004      	beq.n	8002ba4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a90      	ldr	r2, [pc, #576]	; (8002e00 <UART_SetConfig+0x2c8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d126      	bne.n	8002c10 <UART_SetConfig+0xd8>
 8002bc2:	4b90      	ldr	r3, [pc, #576]	; (8002e04 <UART_SetConfig+0x2cc>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d81b      	bhi.n	8002c08 <UART_SetConfig+0xd0>
 8002bd0:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <UART_SetConfig+0xa0>)
 8002bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd6:	bf00      	nop
 8002bd8:	08002be9 	.word	0x08002be9
 8002bdc:	08002bf9 	.word	0x08002bf9
 8002be0:	08002bf1 	.word	0x08002bf1
 8002be4:	08002c01 	.word	0x08002c01
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bee:	e116      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bf6:	e112      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bfe:	e10e      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002c00:	2308      	movs	r3, #8
 8002c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c06:	e10a      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002c08:	2310      	movs	r3, #16
 8002c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c0e:	e106      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a7c      	ldr	r2, [pc, #496]	; (8002e08 <UART_SetConfig+0x2d0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d138      	bne.n	8002c8c <UART_SetConfig+0x154>
 8002c1a:	4b7a      	ldr	r3, [pc, #488]	; (8002e04 <UART_SetConfig+0x2cc>)
 8002c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b0c      	cmp	r3, #12
 8002c26:	d82d      	bhi.n	8002c84 <UART_SetConfig+0x14c>
 8002c28:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <UART_SetConfig+0xf8>)
 8002c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2e:	bf00      	nop
 8002c30:	08002c65 	.word	0x08002c65
 8002c34:	08002c85 	.word	0x08002c85
 8002c38:	08002c85 	.word	0x08002c85
 8002c3c:	08002c85 	.word	0x08002c85
 8002c40:	08002c75 	.word	0x08002c75
 8002c44:	08002c85 	.word	0x08002c85
 8002c48:	08002c85 	.word	0x08002c85
 8002c4c:	08002c85 	.word	0x08002c85
 8002c50:	08002c6d 	.word	0x08002c6d
 8002c54:	08002c85 	.word	0x08002c85
 8002c58:	08002c85 	.word	0x08002c85
 8002c5c:	08002c85 	.word	0x08002c85
 8002c60:	08002c7d 	.word	0x08002c7d
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c6a:	e0d8      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c72:	e0d4      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002c74:	2304      	movs	r3, #4
 8002c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c7a:	e0d0      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c82:	e0cc      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002c84:	2310      	movs	r3, #16
 8002c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c8a:	e0c8      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a5e      	ldr	r2, [pc, #376]	; (8002e0c <UART_SetConfig+0x2d4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d125      	bne.n	8002ce2 <UART_SetConfig+0x1aa>
 8002c96:	4b5b      	ldr	r3, [pc, #364]	; (8002e04 <UART_SetConfig+0x2cc>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ca0:	2b30      	cmp	r3, #48	; 0x30
 8002ca2:	d016      	beq.n	8002cd2 <UART_SetConfig+0x19a>
 8002ca4:	2b30      	cmp	r3, #48	; 0x30
 8002ca6:	d818      	bhi.n	8002cda <UART_SetConfig+0x1a2>
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d00a      	beq.n	8002cc2 <UART_SetConfig+0x18a>
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d814      	bhi.n	8002cda <UART_SetConfig+0x1a2>
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <UART_SetConfig+0x182>
 8002cb4:	2b10      	cmp	r3, #16
 8002cb6:	d008      	beq.n	8002cca <UART_SetConfig+0x192>
 8002cb8:	e00f      	b.n	8002cda <UART_SetConfig+0x1a2>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cc0:	e0ad      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cc8:	e0a9      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002cca:	2304      	movs	r3, #4
 8002ccc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cd0:	e0a5      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cd8:	e0a1      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002cda:	2310      	movs	r3, #16
 8002cdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ce0:	e09d      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a4a      	ldr	r2, [pc, #296]	; (8002e10 <UART_SetConfig+0x2d8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d125      	bne.n	8002d38 <UART_SetConfig+0x200>
 8002cec:	4b45      	ldr	r3, [pc, #276]	; (8002e04 <UART_SetConfig+0x2cc>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002cf6:	2bc0      	cmp	r3, #192	; 0xc0
 8002cf8:	d016      	beq.n	8002d28 <UART_SetConfig+0x1f0>
 8002cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8002cfc:	d818      	bhi.n	8002d30 <UART_SetConfig+0x1f8>
 8002cfe:	2b80      	cmp	r3, #128	; 0x80
 8002d00:	d00a      	beq.n	8002d18 <UART_SetConfig+0x1e0>
 8002d02:	2b80      	cmp	r3, #128	; 0x80
 8002d04:	d814      	bhi.n	8002d30 <UART_SetConfig+0x1f8>
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <UART_SetConfig+0x1d8>
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d008      	beq.n	8002d20 <UART_SetConfig+0x1e8>
 8002d0e:	e00f      	b.n	8002d30 <UART_SetConfig+0x1f8>
 8002d10:	2300      	movs	r3, #0
 8002d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d16:	e082      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d1e:	e07e      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d20:	2304      	movs	r3, #4
 8002d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d26:	e07a      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d28:	2308      	movs	r3, #8
 8002d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d2e:	e076      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d30:	2310      	movs	r3, #16
 8002d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d36:	e072      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a35      	ldr	r2, [pc, #212]	; (8002e14 <UART_SetConfig+0x2dc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d12a      	bne.n	8002d98 <UART_SetConfig+0x260>
 8002d42:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <UART_SetConfig+0x2cc>)
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d50:	d01a      	beq.n	8002d88 <UART_SetConfig+0x250>
 8002d52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d56:	d81b      	bhi.n	8002d90 <UART_SetConfig+0x258>
 8002d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d5c:	d00c      	beq.n	8002d78 <UART_SetConfig+0x240>
 8002d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d62:	d815      	bhi.n	8002d90 <UART_SetConfig+0x258>
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <UART_SetConfig+0x238>
 8002d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d6c:	d008      	beq.n	8002d80 <UART_SetConfig+0x248>
 8002d6e:	e00f      	b.n	8002d90 <UART_SetConfig+0x258>
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d76:	e052      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d7e:	e04e      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d80:	2304      	movs	r3, #4
 8002d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d86:	e04a      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d88:	2308      	movs	r3, #8
 8002d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d8e:	e046      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d90:	2310      	movs	r3, #16
 8002d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d96:	e042      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a17      	ldr	r2, [pc, #92]	; (8002dfc <UART_SetConfig+0x2c4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d13a      	bne.n	8002e18 <UART_SetConfig+0x2e0>
 8002da2:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <UART_SetConfig+0x2cc>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002dac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002db0:	d01a      	beq.n	8002de8 <UART_SetConfig+0x2b0>
 8002db2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002db6:	d81b      	bhi.n	8002df0 <UART_SetConfig+0x2b8>
 8002db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dbc:	d00c      	beq.n	8002dd8 <UART_SetConfig+0x2a0>
 8002dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc2:	d815      	bhi.n	8002df0 <UART_SetConfig+0x2b8>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <UART_SetConfig+0x298>
 8002dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dcc:	d008      	beq.n	8002de0 <UART_SetConfig+0x2a8>
 8002dce:	e00f      	b.n	8002df0 <UART_SetConfig+0x2b8>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dd6:	e022      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dde:	e01e      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002de0:	2304      	movs	r3, #4
 8002de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002de6:	e01a      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002de8:	2308      	movs	r3, #8
 8002dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dee:	e016      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002df0:	2310      	movs	r3, #16
 8002df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002df6:	e012      	b.n	8002e1e <UART_SetConfig+0x2e6>
 8002df8:	efff69f3 	.word	0xefff69f3
 8002dfc:	40008000 	.word	0x40008000
 8002e00:	40013800 	.word	0x40013800
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40004400 	.word	0x40004400
 8002e0c:	40004800 	.word	0x40004800
 8002e10:	40004c00 	.word	0x40004c00
 8002e14:	40005000 	.word	0x40005000
 8002e18:	2310      	movs	r3, #16
 8002e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a9f      	ldr	r2, [pc, #636]	; (80030a0 <UART_SetConfig+0x568>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d17a      	bne.n	8002f1e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d824      	bhi.n	8002e7a <UART_SetConfig+0x342>
 8002e30:	a201      	add	r2, pc, #4	; (adr r2, 8002e38 <UART_SetConfig+0x300>)
 8002e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e36:	bf00      	nop
 8002e38:	08002e5d 	.word	0x08002e5d
 8002e3c:	08002e7b 	.word	0x08002e7b
 8002e40:	08002e65 	.word	0x08002e65
 8002e44:	08002e7b 	.word	0x08002e7b
 8002e48:	08002e6b 	.word	0x08002e6b
 8002e4c:	08002e7b 	.word	0x08002e7b
 8002e50:	08002e7b 	.word	0x08002e7b
 8002e54:	08002e7b 	.word	0x08002e7b
 8002e58:	08002e73 	.word	0x08002e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e5c:	f7ff f84c 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8002e60:	61f8      	str	r0, [r7, #28]
        break;
 8002e62:	e010      	b.n	8002e86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e64:	4b8f      	ldr	r3, [pc, #572]	; (80030a4 <UART_SetConfig+0x56c>)
 8002e66:	61fb      	str	r3, [r7, #28]
        break;
 8002e68:	e00d      	b.n	8002e86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e6a:	f7fe ffad 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002e6e:	61f8      	str	r0, [r7, #28]
        break;
 8002e70:	e009      	b.n	8002e86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e76:	61fb      	str	r3, [r7, #28]
        break;
 8002e78:	e005      	b.n	8002e86 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80fb 	beq.w	8003084 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d305      	bcc.n	8002eaa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d903      	bls.n	8002eb2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002eb0:	e0e8      	b.n	8003084 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	461c      	mov	r4, r3
 8002eb8:	4615      	mov	r5, r2
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	022b      	lsls	r3, r5, #8
 8002ec4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002ec8:	0222      	lsls	r2, r4, #8
 8002eca:	68f9      	ldr	r1, [r7, #12]
 8002ecc:	6849      	ldr	r1, [r1, #4]
 8002ece:	0849      	lsrs	r1, r1, #1
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	4688      	mov	r8, r1
 8002ed4:	4681      	mov	r9, r0
 8002ed6:	eb12 0a08 	adds.w	sl, r2, r8
 8002eda:	eb43 0b09 	adc.w	fp, r3, r9
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	603b      	str	r3, [r7, #0]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eec:	4650      	mov	r0, sl
 8002eee:	4659      	mov	r1, fp
 8002ef0:	f7fd f96a 	bl	80001c8 <__aeabi_uldivmod>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4613      	mov	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f02:	d308      	bcc.n	8002f16 <UART_SetConfig+0x3de>
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f0a:	d204      	bcs.n	8002f16 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	60da      	str	r2, [r3, #12]
 8002f14:	e0b6      	b.n	8003084 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f1c:	e0b2      	b.n	8003084 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f26:	d15e      	bne.n	8002fe6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002f28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d828      	bhi.n	8002f82 <UART_SetConfig+0x44a>
 8002f30:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <UART_SetConfig+0x400>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f5d 	.word	0x08002f5d
 8002f3c:	08002f65 	.word	0x08002f65
 8002f40:	08002f6d 	.word	0x08002f6d
 8002f44:	08002f83 	.word	0x08002f83
 8002f48:	08002f73 	.word	0x08002f73
 8002f4c:	08002f83 	.word	0x08002f83
 8002f50:	08002f83 	.word	0x08002f83
 8002f54:	08002f83 	.word	0x08002f83
 8002f58:	08002f7b 	.word	0x08002f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f5c:	f7fe ffcc 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8002f60:	61f8      	str	r0, [r7, #28]
        break;
 8002f62:	e014      	b.n	8002f8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f64:	f7fe ffde 	bl	8001f24 <HAL_RCC_GetPCLK2Freq>
 8002f68:	61f8      	str	r0, [r7, #28]
        break;
 8002f6a:	e010      	b.n	8002f8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f6c:	4b4d      	ldr	r3, [pc, #308]	; (80030a4 <UART_SetConfig+0x56c>)
 8002f6e:	61fb      	str	r3, [r7, #28]
        break;
 8002f70:	e00d      	b.n	8002f8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f72:	f7fe ff29 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002f76:	61f8      	str	r0, [r7, #28]
        break;
 8002f78:	e009      	b.n	8002f8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f7e:	61fb      	str	r3, [r7, #28]
        break;
 8002f80:	e005      	b.n	8002f8e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d077      	beq.n	8003084 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	005a      	lsls	r2, r3, #1
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	441a      	add	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b0f      	cmp	r3, #15
 8002fae:	d916      	bls.n	8002fde <UART_SetConfig+0x4a6>
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb6:	d212      	bcs.n	8002fde <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	f023 030f 	bic.w	r3, r3, #15
 8002fc0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	8afb      	ldrh	r3, [r7, #22]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	8afa      	ldrh	r2, [r7, #22]
 8002fda:	60da      	str	r2, [r3, #12]
 8002fdc:	e052      	b.n	8003084 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002fe4:	e04e      	b.n	8003084 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fe6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d827      	bhi.n	800303e <UART_SetConfig+0x506>
 8002fee:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <UART_SetConfig+0x4bc>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	08003019 	.word	0x08003019
 8002ff8:	08003021 	.word	0x08003021
 8002ffc:	08003029 	.word	0x08003029
 8003000:	0800303f 	.word	0x0800303f
 8003004:	0800302f 	.word	0x0800302f
 8003008:	0800303f 	.word	0x0800303f
 800300c:	0800303f 	.word	0x0800303f
 8003010:	0800303f 	.word	0x0800303f
 8003014:	08003037 	.word	0x08003037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003018:	f7fe ff6e 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 800301c:	61f8      	str	r0, [r7, #28]
        break;
 800301e:	e014      	b.n	800304a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003020:	f7fe ff80 	bl	8001f24 <HAL_RCC_GetPCLK2Freq>
 8003024:	61f8      	str	r0, [r7, #28]
        break;
 8003026:	e010      	b.n	800304a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003028:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <UART_SetConfig+0x56c>)
 800302a:	61fb      	str	r3, [r7, #28]
        break;
 800302c:	e00d      	b.n	800304a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800302e:	f7fe fecb 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8003032:	61f8      	str	r0, [r7, #28]
        break;
 8003034:	e009      	b.n	800304a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800303a:	61fb      	str	r3, [r7, #28]
        break;
 800303c:	e005      	b.n	800304a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003048:	bf00      	nop
    }

    if (pclk != 0U)
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d019      	beq.n	8003084 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	085a      	lsrs	r2, r3, #1
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	441a      	add	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003062:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b0f      	cmp	r3, #15
 8003068:	d909      	bls.n	800307e <UART_SetConfig+0x546>
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d205      	bcs.n	800307e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60da      	str	r2, [r3, #12]
 800307c:	e002      	b.n	8003084 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003090:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003094:	4618      	mov	r0, r3
 8003096:	3728      	adds	r7, #40	; 0x28
 8003098:	46bd      	mov	sp, r7
 800309a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800309e:	bf00      	nop
 80030a0:	40008000 	.word	0x40008000
 80030a4:	00f42400 	.word	0x00f42400

080030a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01a      	beq.n	80031be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031a6:	d10a      	bne.n	80031be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	605a      	str	r2, [r3, #4]
  }
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b098      	sub	sp, #96	; 0x60
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031fc:	f7fd fd92 	bl	8000d24 <HAL_GetTick>
 8003200:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b08      	cmp	r3, #8
 800320e:	d12e      	bne.n	800326e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003218:	2200      	movs	r2, #0
 800321a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f88c 	bl	800333c <UART_WaitOnFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d021      	beq.n	800326e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003232:	e853 3f00 	ldrex	r3, [r3]
 8003236:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800323e:	653b      	str	r3, [r7, #80]	; 0x50
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003248:	647b      	str	r3, [r7, #68]	; 0x44
 800324a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800324e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003250:	e841 2300 	strex	r3, r2, [r1]
 8003254:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1e6      	bne.n	800322a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e062      	b.n	8003334 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b04      	cmp	r3, #4
 800327a:	d149      	bne.n	8003310 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800327c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003284:	2200      	movs	r2, #0
 8003286:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f856 	bl	800333c <UART_WaitOnFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d03c      	beq.n	8003310 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	e853 3f00 	ldrex	r3, [r3]
 80032a2:	623b      	str	r3, [r7, #32]
   return(result);
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b4:	633b      	str	r3, [r7, #48]	; 0x30
 80032b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032bc:	e841 2300 	strex	r3, r2, [r1]
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e6      	bne.n	8003296 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3308      	adds	r3, #8
 80032ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	e853 3f00 	ldrex	r3, [r3]
 80032d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	64bb      	str	r3, [r7, #72]	; 0x48
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3308      	adds	r3, #8
 80032e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032e8:	61fa      	str	r2, [r7, #28]
 80032ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ec:	69b9      	ldr	r1, [r7, #24]
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	e841 2300 	strex	r3, r2, [r1]
 80032f4:	617b      	str	r3, [r7, #20]
   return(result);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1e5      	bne.n	80032c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2220      	movs	r2, #32
 8003300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e011      	b.n	8003334 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3758      	adds	r7, #88	; 0x58
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334c:	e049      	b.n	80033e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003354:	d045      	beq.n	80033e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003356:	f7fd fce5 	bl	8000d24 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	429a      	cmp	r2, r3
 8003364:	d302      	bcc.n	800336c <UART_WaitOnFlagUntilTimeout+0x30>
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e048      	b.n	8003402 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	d031      	beq.n	80033e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b08      	cmp	r3, #8
 800338a:	d110      	bne.n	80033ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2208      	movs	r2, #8
 8003392:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 f838 	bl	800340a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2208      	movs	r2, #8
 800339e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e029      	b.n	8003402 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033bc:	d111      	bne.n	80033e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f81e 	bl	800340a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e00f      	b.n	8003402 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69da      	ldr	r2, [r3, #28]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4013      	ands	r3, r2
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	bf0c      	ite	eq
 80033f2:	2301      	moveq	r3, #1
 80033f4:	2300      	movne	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d0a6      	beq.n	800334e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800340a:	b480      	push	{r7}
 800340c:	b095      	sub	sp, #84	; 0x54
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003430:	643b      	str	r3, [r7, #64]	; 0x40
 8003432:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003434:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003438:	e841 2300 	strex	r3, r2, [r1]
 800343c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800343e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e6      	bne.n	8003412 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3308      	adds	r3, #8
 800344a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	e853 3f00 	ldrex	r3, [r3]
 8003452:	61fb      	str	r3, [r7, #28]
   return(result);
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	64bb      	str	r3, [r7, #72]	; 0x48
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3308      	adds	r3, #8
 8003462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003464:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800346a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e5      	bne.n	8003444 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347c:	2b01      	cmp	r3, #1
 800347e:	d118      	bne.n	80034b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	e853 3f00 	ldrex	r3, [r3]
 800348c:	60bb      	str	r3, [r7, #8]
   return(result);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f023 0310 	bic.w	r3, r3, #16
 8003494:	647b      	str	r3, [r7, #68]	; 0x44
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800349e:	61bb      	str	r3, [r7, #24]
 80034a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a2:	6979      	ldr	r1, [r7, #20]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	e841 2300 	strex	r3, r2, [r1]
 80034aa:	613b      	str	r3, [r7, #16]
   return(result);
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1e6      	bne.n	8003480 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80034c6:	bf00      	nop
 80034c8:	3754      	adds	r7, #84	; 0x54
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <memset>:
 80034d2:	4402      	add	r2, r0
 80034d4:	4603      	mov	r3, r0
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d100      	bne.n	80034dc <memset+0xa>
 80034da:	4770      	bx	lr
 80034dc:	f803 1b01 	strb.w	r1, [r3], #1
 80034e0:	e7f9      	b.n	80034d6 <memset+0x4>
	...

080034e4 <__libc_init_array>:
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	4d0d      	ldr	r5, [pc, #52]	; (800351c <__libc_init_array+0x38>)
 80034e8:	4c0d      	ldr	r4, [pc, #52]	; (8003520 <__libc_init_array+0x3c>)
 80034ea:	1b64      	subs	r4, r4, r5
 80034ec:	10a4      	asrs	r4, r4, #2
 80034ee:	2600      	movs	r6, #0
 80034f0:	42a6      	cmp	r6, r4
 80034f2:	d109      	bne.n	8003508 <__libc_init_array+0x24>
 80034f4:	4d0b      	ldr	r5, [pc, #44]	; (8003524 <__libc_init_array+0x40>)
 80034f6:	4c0c      	ldr	r4, [pc, #48]	; (8003528 <__libc_init_array+0x44>)
 80034f8:	f000 f818 	bl	800352c <_init>
 80034fc:	1b64      	subs	r4, r4, r5
 80034fe:	10a4      	asrs	r4, r4, #2
 8003500:	2600      	movs	r6, #0
 8003502:	42a6      	cmp	r6, r4
 8003504:	d105      	bne.n	8003512 <__libc_init_array+0x2e>
 8003506:	bd70      	pop	{r4, r5, r6, pc}
 8003508:	f855 3b04 	ldr.w	r3, [r5], #4
 800350c:	4798      	blx	r3
 800350e:	3601      	adds	r6, #1
 8003510:	e7ee      	b.n	80034f0 <__libc_init_array+0xc>
 8003512:	f855 3b04 	ldr.w	r3, [r5], #4
 8003516:	4798      	blx	r3
 8003518:	3601      	adds	r6, #1
 800351a:	e7f2      	b.n	8003502 <__libc_init_array+0x1e>
 800351c:	080035ac 	.word	0x080035ac
 8003520:	080035ac 	.word	0x080035ac
 8003524:	080035ac 	.word	0x080035ac
 8003528:	080035b0 	.word	0x080035b0

0800352c <_init>:
 800352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352e:	bf00      	nop
 8003530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003532:	bc08      	pop	{r3}
 8003534:	469e      	mov	lr, r3
 8003536:	4770      	bx	lr

08003538 <_fini>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	bf00      	nop
 800353c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353e:	bc08      	pop	{r3}
 8003540:	469e      	mov	lr, r3
 8003542:	4770      	bx	lr
